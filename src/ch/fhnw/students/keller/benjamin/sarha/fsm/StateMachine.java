package ch.fhnw.students.keller.benjamin.sarha.fsm;

import java.util.ArrayList;

import ch.fhnw.students.keller.benjamin.sarha.LuaParseable;

public class StateMachine extends ArrayList<State> implements LuaParseable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String name;
	private State initialState;
	public final int createId=(int) (System.currentTimeMillis()/1000);
	private int changeId;
	

	public StateMachine() {
		super();
		name = "NewStateMachine";
		changeId=createId;
	}

	public void setInitialState(State initialState) {
		this.initialState = initialState;
	}

	public void setName(String name) {
		this.name = name;
	}
	public String getName(){
		return name;
	}

	public State getInitialState() {
		return initialState;
	}

	public void printMachine() {
		String str = "State Machine: " + name;
		for (State states : this) {
			str = str + "\n State: " + states;
			for (Transition transitions : states) {
				str = str + "\n  Transition: " + transitions;
			}
		}
		System.out.println(str);
	}

	@Override
	public String toString() {

		return name;
	}

	public void setStateName(State state, String name) {
		for (State states : this) {
			if (states.getStateName().equals(name)) {
				return;
			}
			if (!(name.equals("") || name == null)) {
				state.setStateName(name);
			}

		}
	}
	
	public void setChangeId(){
		changeId = (int) (System.currentTimeMillis()/1000);
	}
	public int getChangeId(){
		return changeId;
	}
	
	public String getLuaFunctionForState(State toState) {
		String str="";
		str="state"+indexOf(toState)+"()";
		return str;
	}

	@Override
	public String parse() {
		String lua="";
		lua="--[[\nSARHA Android Remote Home Automation\n\n";
		lua+="This eLua script is auto-generated by the SARHA-App\n\n";
		lua+="Info\n";
		lua+="Name: "+name+"\n";
		lua+="Create ID: "+createId+"\n";
		lua+="Change ID: "+changeId+"\n";
		lua+="]]--\n\n";
		lua+="module(..., package.seeall)\n\n";
		
		for (State state : this) {
			lua+=state.parse();
		}
		lua+="\n\n";
		lua+="table.insert(threads, coroutine.create(function ()\n";
		lua+="\tstate"+indexOf(initialState)+"()\n";
		lua+="end))\n";
		
		return lua;
	}

}
